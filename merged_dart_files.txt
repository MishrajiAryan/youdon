File Location: lib\main.dart
File Name: main.dart
File Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import 'screens/home_screen.dart';
import 'theme_notifier.dart';
import 'models/download_manager.dart';

void main() {
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => ThemeNotifier()),
        ChangeNotifierProvider(create: (_) => DownloadManager()),
      ],
      child: const YouDonApp(),
    ),
  );
}

class YouDonApp extends StatelessWidget {
  const YouDonApp({super.key});

  // Enhanced Modern Light Theme
  static final ThemeData _lightTheme = ThemeData(
    useMaterial3: true,
    brightness: Brightness.light,
    colorScheme: ColorScheme.fromSeed(
      seedColor: const Color(0xFF6366F1),
      brightness: Brightness.light,
      primary: const Color(0xFF6366F1),
      secondary: const Color(0xFF8B5CF6),
      tertiary: const Color(0xFF06B6D4),
      surface: const Color(0xFFFAFAFA),
      surfaceContainerHighest: const Color(0xFFF1F5F9),
      onSurface: const Color(0xFF0F172A),
      outline: const Color(0xFFE2E8F0),
    ),
    scaffoldBackgroundColor: const Color(0xFFFBFBFB),
    textTheme: GoogleFonts.interTextTheme().copyWith(
      displayLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w900,
        fontSize: 36,
        letterSpacing: -1.2,
        color: const Color(0xFF0F172A),
      ),
      displayMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w800,
        fontSize: 32,
        letterSpacing: -1.0,
        color: const Color(0xFF0F172A),
      ),
      headlineLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w700,
        fontSize: 28,
        letterSpacing: -0.8,
        color: const Color(0xFF1E293B),
      ),
      headlineMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 24,
        letterSpacing: -0.6,
        color: const Color(0xFF1E293B),
      ),
      titleLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 20,
        letterSpacing: -0.4,
        color: const Color(0xFF334155),
      ),
      titleMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w500,
        fontSize: 18,
        letterSpacing: -0.2,
        color: const Color(0xFF475569),
      ),
      bodyLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w400,
        fontSize: 16,
        letterSpacing: 0.1,
        color: const Color(0xFF64748B),
      ),
      bodyMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w400,
        fontSize: 14,
        letterSpacing: 0.2,
        color: const Color(0xFF64748B),
      ),
      labelLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 14,
        letterSpacing: 0.5,
        color: const Color(0xFF475569),
      ),
    ),
    cardTheme: CardTheme(
      elevation: 0,
      shadowColor: Colors.black.withOpacity(0.05),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      color: Colors.white,
      surfaceTintColor: Colors.transparent,
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        elevation: 0,
        shadowColor: Colors.transparent,
        padding: const EdgeInsets.symmetric(horizontal: 28, vertical: 18),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        textStyle: GoogleFonts.inter(
          fontWeight: FontWeight.w600,
          fontSize: 16,
          letterSpacing: 0.2,
        ),
      ),
    ),
    inputDecorationTheme: InputDecorationTheme(
      filled: true,
      fillColor: const Color(0xFFF8FAFC),
      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFFE2E8F0), width: 1.5),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFFE2E8F0), width: 1.5),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFF6366F1), width: 2.5),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFFEF4444), width: 1.5),
      ),
      labelStyle: GoogleFonts.inter(
        color: const Color(0xFF64748B),
        fontWeight: FontWeight.w500,
        fontSize: 16,
      ),
      hintStyle: GoogleFonts.inter(
        color: const Color(0xFF94A3B8),
        fontWeight: FontWeight.w400,
        fontSize: 16,
      ),
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.transparent,
      surfaceTintColor: Colors.transparent,
      elevation: 0,
      scrolledUnderElevation: 0,
      centerTitle: false,
      titleTextStyle: GoogleFonts.inter(
        color: const Color(0xFF0F172A),
        fontSize: 28,
        fontWeight: FontWeight.w800,
        letterSpacing: -0.8,
      ),
      iconTheme: const IconThemeData(
        color: Color(0xFF475569),
        size: 24,
      ),
    ),
    tabBarTheme: TabBarTheme(
      indicator: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        gradient: const LinearGradient(
          colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF6366F1).withOpacity(0.25),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      indicatorSize: TabBarIndicatorSize.tab,
      labelColor: Colors.white,
      unselectedLabelColor: const Color(0xFF64748B),
      labelStyle: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 15,
        letterSpacing: 0.2,
      ),
      unselectedLabelStyle: GoogleFonts.inter(
        fontWeight: FontWeight.w500,
        fontSize: 15,
        letterSpacing: 0.2,
      ),
    ),
  );

  // Enhanced Modern Dark Theme
  static final ThemeData _darkTheme = ThemeData(
    useMaterial3: true,
    brightness: Brightness.dark,
    colorScheme: ColorScheme.fromSeed(
      seedColor: const Color(0xFF6366F1),
      brightness: Brightness.dark,
      primary: const Color(0xFF6366F1),
      secondary: const Color(0xFF8B5CF6),
      tertiary: const Color(0xFF06B6D4),
      surface: const Color(0xFF0F172A),
      surfaceContainerHighest: const Color(0xFF1E293B),
      onSurface: const Color(0xFFE2E8F0),
      outline: const Color(0xFF334155),
    ),
    scaffoldBackgroundColor: const Color(0xFF020817),
    textTheme: GoogleFonts.interTextTheme(ThemeData.dark().textTheme).copyWith(
      displayLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w900,
        fontSize: 36,
        letterSpacing: -1.2,
        color: const Color(0xFFF8FAFC),
      ),
      displayMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w800,
        fontSize: 32,
        letterSpacing: -1.0,
        color: const Color(0xFFF8FAFC),
      ),
      headlineLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w700,
        fontSize: 28,
        letterSpacing: -0.8,
        color: const Color(0xFFE2E8F0),
      ),
      headlineMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 24,
        letterSpacing: -0.6,
        color: const Color(0xFFE2E8F0),
      ),
      titleLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 20,
        letterSpacing: -0.4,
        color: const Color(0xFFCBD5E1),
      ),
      titleMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w500,
        fontSize: 18,
        letterSpacing: -0.2,
        color: const Color(0xFFCBD5E1),
      ),
      bodyLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w400,
        fontSize: 16,
        letterSpacing: 0.1,
        color: const Color(0xFF94A3B8),
      ),
      bodyMedium: GoogleFonts.inter(
        fontWeight: FontWeight.w400,
        fontSize: 14,
        letterSpacing: 0.2,
        color: const Color(0xFF94A3B8),
      ),
      labelLarge: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 14,
        letterSpacing: 0.5,
        color: const Color(0xFFCBD5E1),
      ),
    ),
    cardTheme: CardTheme(
      elevation: 0,
      shadowColor: Colors.black.withOpacity(0.2),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      color: const Color(0xFF0F172A),
      surfaceTintColor: Colors.transparent,
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        elevation: 0,
        shadowColor: Colors.transparent,
        padding: const EdgeInsets.symmetric(horizontal: 28, vertical: 18),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        textStyle: GoogleFonts.inter(
          fontWeight: FontWeight.w600,
          fontSize: 16,
          letterSpacing: 0.2,
        ),
      ),
    ),
    inputDecorationTheme: InputDecorationTheme(
      filled: true,
      fillColor: const Color(0xFF1E293B),
      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 18),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFF334155), width: 1.5),
      ),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFF334155), width: 1.5),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFF6366F1), width: 2.5),
      ),
      errorBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(16),
        borderSide: const BorderSide(color: Color(0xFFEF4444), width: 1.5),
      ),
      labelStyle: GoogleFonts.inter(
        color: const Color(0xFF94A3B8),
        fontWeight: FontWeight.w500,
        fontSize: 16,
      ),
      hintStyle: GoogleFonts.inter(
        color: const Color(0xFF64748B),
        fontWeight: FontWeight.w400,
        fontSize: 16,
      ),
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: Colors.transparent,
      surfaceTintColor: Colors.transparent,
      elevation: 0,
      scrolledUnderElevation: 0,
      centerTitle: false,
      titleTextStyle: GoogleFonts.inter(
        color: const Color(0xFFF8FAFC),
        fontSize: 28,
        fontWeight: FontWeight.w800,
        letterSpacing: -0.8,
      ),
      iconTheme: const IconThemeData(
        color: Color(0xFFE2E8F0),
        size: 24,
      ),
    ),
    tabBarTheme: TabBarTheme(
      indicator: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        gradient: const LinearGradient(
          colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
          begin: Alignment.centerLeft,
          end: Alignment.centerRight,
        ),
        boxShadow: [
          BoxShadow(
            color: const Color(0xFF6366F1).withOpacity(0.3),
            blurRadius: 12,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      indicatorSize: TabBarIndicatorSize.tab,
      labelColor: Colors.white,
      unselectedLabelColor: const Color(0xFF94A3B8),
      labelStyle: GoogleFonts.inter(
        fontWeight: FontWeight.w600,
        fontSize: 15,
        letterSpacing: 0.2,
      ),
      unselectedLabelStyle: GoogleFonts.inter(
        fontWeight: FontWeight.w500,
        fontSize: 15,
        letterSpacing: 0.2,
      ),
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Consumer<ThemeNotifier>(
      builder: (context, themeNotifier, child) {
        return MaterialApp(
          title: 'YouDon - Premium YouTube Downloader',
          theme: _lightTheme,
          darkTheme: _darkTheme,
          themeMode: themeNotifier.themeMode,
          home: const HomeScreen(),
          debugShowCheckedModeBanner: false,
        );
      },
    );
  }
}

----------------------------------------
File Location: lib\theme_notifier.dart
File Name: theme_notifier.dart
File Code:
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart'; // Import shared_preferences

class ThemeNotifier with ChangeNotifier {
  ThemeMode _themeMode = ThemeMode.system;

  ThemeMode get themeMode => _themeMode;

  ThemeNotifier() {
    _loadThemeMode(); // Load theme mode from preferences
  }

  Future<void> _loadThemeMode() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    int themeModeIndex = prefs.getInt('themeMode') ?? ThemeMode.system.index;
    _themeMode = ThemeMode.values[themeModeIndex];
    notifyListeners();
  }

  void setTheme(ThemeMode themeMode) {
    _themeMode = themeMode;
    _saveThemeMode(); // Save theme mode to preferences
    notifyListeners();
  }

  void toggleTheme() {
    _themeMode = _themeMode == ThemeMode.dark ? ThemeMode.light : ThemeMode.dark;
    _saveThemeMode(); // Save theme mode to preferences
    notifyListeners();
  }

  Future<void> _saveThemeMode() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setInt('themeMode', _themeMode.index);
  }
}

----------------------------------------
File Location: lib\models\download_manager.dart
File Name: download_manager.dart
File Code:
// lib/models/download_manager.dart

import 'package:flutter/material.dart';
import 'download_task.dart';
import '../services/downloader.dart';
import '../utils/file_picker.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

class DownloadManagerMessage {
  final String text;
  final Color color;
  final IconData icon;

  DownloadManagerMessage(this.text, {required this.color, required this.icon});
}

class DownloadManager extends ChangeNotifier {
  List<DownloadTask> downloadQueue = [];
  List<DownloadTask> completedTasks = [];
  String? downloadPath;
  bool _isDownloading = false;

  // Track URLs being downloaded to prevent duplicates
  Set<String> _activeDownloads = {};

  DownloadManagerMessage? uiMessage;

  DownloadManager() {
    _loadPreferences();
  }

  Future<void> _loadPreferences() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    downloadPath = prefs.getString('downloadPath');
    String? completedTasksJson = prefs.getString('completedTasks');
    try {
      completedTasks = (completedTasksJson == null || completedTasksJson.isEmpty)
          ? []
          : (jsonDecode(completedTasksJson) as List)
              .map((taskJson) => DownloadTask.fromJson(taskJson))
              .toList();
    } catch (e) {
      completedTasks = [];
      _setMessage(
        "Error loading completed tasks.",
        color: const Color(0xFFEF4444),
        icon: Icons.error_outline_rounded,
      );
    }
  }

  Future<void> _savePreferences() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('downloadPath', downloadPath ?? "");
    String completedTasksJson =
        jsonEncode(completedTasks.map((task) => task.toJson()).toList());
    await prefs.setString('completedTasks', completedTasksJson);
  }

  void _setMessage(String text, {required Color color, required IconData icon}) {
    uiMessage = DownloadManagerMessage(text, color: color, icon: icon);
    notifyListeners();
  }

  void clearMessage() {
    uiMessage = null;
  }

  Future<void> setDownloadPath() async {
    String? path = await pickDownloadFolder();
    if (path != null) {
      downloadPath = path;
      await _savePreferences();
      _setMessage(
        "📁 Download folder selected successfully!",
        color: const Color(0xFF10B981),
        icon: Icons.folder_open_rounded,
      );
      notifyListeners();
    } else {
      _setMessage(
        "Failed to select download folder.",
        color: const Color(0xFFEF4444),
        icon: Icons.folder_off_rounded,
      );
    }
  }

  void addToQueue(DownloadTask task) {
    // Create unique identifier for this download
    String taskId = "${task.url}_${task.format}_${task.mode}";
    
    // Check if already downloading or in queue
    if (_activeDownloads.contains(taskId)) {
      _setMessage(
        "⚠️ This download is already in progress.",
        color: const Color(0xFFF59E0B),
        icon: Icons.warning_rounded,
      );
      return;
    }

    // Check if already in queue
    bool alreadyInQueue = downloadQueue.any((existingTask) =>
        existingTask.url == task.url &&
        existingTask.format == task.format &&
        existingTask.mode == task.mode);

    if (alreadyInQueue) {
      _setMessage(
        "⚠️ This download is already in the queue.",
        color: const Color(0xFFF59E0B),
        icon: Icons.warning_rounded,
      );
      return;
    }

    // REMOVED: Check if already completed - users can now re-download completed tasks

    downloadQueue.add(task);
    _setMessage(
      "✅ Download added to queue successfully!",
      color: const Color(0xFF10B981),
      icon: Icons.download_rounded,
    );
    notifyListeners();
    _processNextDownload();
  }

  // NEW: Requeue functionality to move completed task back to active queue
  void requeueTask(DownloadTask completedTask) {
    // Create a new task based on the completed one (reset progress and status)
    final newTask = DownloadTask(
      url: completedTask.url,
      format: completedTask.format,
      mode: completedTask.mode,
      downloadPath: completedTask.downloadPath,
    );
    
    // Add to queue using existing addToQueue method (handles duplicates)
    String taskId = "${newTask.url}_${newTask.format}_${newTask.mode}";
    
    // Check if already in active downloads or queue
    if (_activeDownloads.contains(taskId)) {
      _setMessage(
        "⚠️ This download is already active.",
        color: const Color(0xFFF59E0B),
        icon: Icons.warning_rounded,
      );
      return;
    }

    bool alreadyInQueue = downloadQueue.any((existingTask) =>
        existingTask.url == newTask.url &&
        existingTask.format == newTask.format &&
        existingTask.mode == newTask.mode);

    if (alreadyInQueue) {
      _setMessage(
        "⚠️ This download is already in the active queue.",
        color: const Color(0xFFF59E0B),
        icon: Icons.warning_rounded,
      );
      return;
    }

    // Add to queue
    downloadQueue.add(newTask);
    
    _setMessage(
      "🔄 Download re-added to queue successfully!",
      color: const Color(0xFF10B981),
      icon: Icons.refresh_rounded,
    );
    
    notifyListeners();
    _processNextDownload();
  }

  void _processNextDownload() {
    if (_isDownloading || downloadQueue.isEmpty) return;
    
    DownloadTask task = downloadQueue.first;
    String taskId = "${task.url}_${task.format}_${task.mode}";
    
    // Double-check if this download is already active
    if (_activeDownloads.contains(taskId)) {
      downloadQueue.removeAt(0);
      _processNextDownload();
      return;
    }
    
    _isDownloading = true;
    _activeDownloads.add(taskId);
    _startDownload(task);
  }

  void _startDownload(DownloadTask task) async {
    String taskId = "${task.url}_${task.format}_${task.mode}";
    
    task.isDownloading = true;
    task.isProcessing = false;
    notifyListeners();

    try {
      await startDownload(
        url: task.url,
        format: task.format,
        downloadMode: task.mode,
        downloadPath: downloadPath!,
        onProgress: (progress) {
          task.progress = progress;
          notifyListeners();
        },
        onFileName: (fileName) {
          task.fileName = fileName;
          notifyListeners();
        },
        onProcessing: () {
          task.isProcessing = true;
          notifyListeners();
        },
        onComplete: () {
          _downloadComplete(task, taskId);
        },
        onError: (errorMessage) {
          _downloadError(task, taskId, errorMessage);
        },
        createPlaylistFolder: true,
      );
    } catch (e) {
      _downloadError(task, taskId, e.toString());
    }
  }

  void _downloadComplete(DownloadTask task, String taskId) {
    task.isDownloading = false;
    task.isProcessing = false;
    task.isCompleted = true;
    downloadQueue.remove(task);

    // Remove from active downloads
    _activeDownloads.remove(taskId);

    // Add to completed tasks if not already there
    bool alreadyCompleted = completedTasks.any((existingTask) =>
        existingTask.url == task.url &&
        existingTask.format == task.format &&
        existingTask.mode == task.mode);

    if (!alreadyCompleted) {
      completedTasks.add(task);
      _savePreferences();
    }

    _isDownloading = false;
    _setMessage(
      "🎉 Download completed successfully!",
      color: const Color(0xFF10B981),
      icon: Icons.check_circle_rounded,
    );
    notifyListeners();
    _processNextDownload();
  }

  void _downloadError(DownloadTask task, String taskId, String errorMessage) {
    task.isDownloading = false;
    task.isProcessing = false;
    downloadQueue.remove(task);
    
    // Remove from active downloads
    _activeDownloads.remove(taskId);
    
    _isDownloading = false;
    _setMessage(
      "❌ Download failed: $errorMessage",
      color: const Color(0xFFEF4444),
      icon: Icons.error_outline_rounded,
    );
    notifyListeners();
    _processNextDownload();
  }

  void removeCompletedTask(DownloadTask task) {
    completedTasks.remove(task);
    _savePreferences();
    _setMessage(
      "🗑️ Task removed from completed list.",
      color: const Color(0xFFEF4444),
      icon: Icons.delete_rounded,
    );
    notifyListeners();
  }

  void clearAllCompletedTasks() {
    completedTasks.clear();
    _savePreferences();
    _setMessage(
      "🧹 All completed tasks cleared successfully!",
      color: const Color(0xFFEF4444),
      icon: Icons.delete_sweep_rounded,
    );
    notifyListeners();
  }

  // Method to cancel a download if needed
  void cancelDownload(DownloadTask task) {
    String taskId = "${task.url}_${task.format}_${task.mode}";
    downloadQueue.remove(task);
    _activeDownloads.remove(taskId);
    
    if (task.isDownloading && _isDownloading) {
      _isDownloading = false;
      _processNextDownload();
    }
    
    _setMessage(
      "🚫 Download cancelled successfully.",
      color: const Color(0xFFF59E0B),
      icon: Icons.cancel_rounded,
    );
    notifyListeners();
  }

  // Helper method to get queue status
  bool get isDownloadInProgress => _isDownloading;
  
  int get queueCount => downloadQueue.length;
  
  int get completedCount => completedTasks.length;
  
  // Helper method to check if a specific URL is already processed
  bool isUrlAlreadyProcessed(String url, String format, String mode) {
    String taskId = "${url}_${format}_${mode}";
    
    // Check if in active downloads
    if (_activeDownloads.contains(taskId)) return true;
    
    // Check if in queue
    if (downloadQueue.any((task) => 
        task.url == url && task.format == format && task.mode == mode)) {
      return true;
    }
    
    // REMOVED: Check if in completed tasks - allow re-downloading completed tasks
    
    return false;
  }
  
  // Helper method to get download statistics
  Map<String, dynamic> getDownloadStats() {
    return {
      'totalCompleted': completedTasks.length,
      'activeDownloads': downloadQueue.length,
      'isDownloading': _isDownloading,
      'audioDownloads': completedTasks.where((task) => task.format == 'mp3').length,
      'videoDownloads': completedTasks.where((task) => task.format == 'mp4').length,
      'playlistDownloads': completedTasks.where((task) => task.mode == 'playlist').length,
      'singleDownloads': completedTasks.where((task) => task.mode == 'single').length,
    };
  }
}

----------------------------------------
File Location: lib\models\download_task.dart
File Name: download_task.dart
File Code:
// lib/models/download_task.dart

class DownloadTask {
  String url;
  String format;
  String mode;
  String downloadPath;
  double progress;
  bool isCompleted;
  bool isDownloading;
  bool isProcessing; // <-- NEW: Track processing state (FFmpeg, extraction, etc.)
  String? fileName;

  DownloadTask({
    required this.url,
    required this.format,
    required this.mode,
    required this.downloadPath,
    this.progress = 0.0,
    this.isCompleted = false,
    this.isDownloading = false,
    this.isProcessing = false, // <-- NEW: default to false
    this.fileName,
  });

  factory DownloadTask.fromJson(Map<String, dynamic> json) => DownloadTask(
        url: json['url'],
        format: json['format'],
        mode: json['mode'],
        downloadPath: json['downloadPath'],
        progress: (json['progress'] as num).toDouble(),
        isCompleted: json['isCompleted'],
        isDownloading: json['isDownloading'],
        isProcessing: json['isProcessing'] ?? false, // <-- NEW: handle null for older data
        fileName: json['fileName'],
      );

  Map<String, dynamic> toJson() => {
        'url': url,
        'format': format,
        'mode': mode,
        'downloadPath': downloadPath,
        'progress': progress,
        'isCompleted': isCompleted,
        'isDownloading': isDownloading,
        'isProcessing': isProcessing, // <-- NEW
        'fileName': fileName,
      };
}

----------------------------------------
File Location: lib\screens\home_screen.dart
File Name: home_screen.dart
File Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import 'components/download_input.dart';
import 'components/ongoing_tasks.dart';
import 'components/completed_tasks.dart';
import '../theme_notifier.dart';
import '../models/download_manager.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  late AnimationController _fadeController;
  late AnimationController _slideController;
  late AnimationController _heroController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;
  late Animation<double> _heroAnimation;
  
  bool _showDownloadInput = true;
  int _currentTabIndex = 0;

  @override
  void initState() {
    super.initState();
    
    _tabController = TabController(length: 2, vsync: this);
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _heroController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeInOutCubic,
    ));

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0, -0.3),
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: _slideController,
      curve: Curves.elasticOut,
    ));

    _heroAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _heroController,
      curve: Curves.easeOutBack,
    ));

    _tabController.addListener(() {
      if (mounted && _tabController.indexIsChanging) {
        setState(() {
          _currentTabIndex = _tabController.index;
          _showDownloadInput = _tabController.index == 0;
        });
        
        if (_showDownloadInput) {
          _fadeController.forward();
          _slideController.forward();
        } else {
          _fadeController.reverse();
          _slideController.reverse();
        }
      }
    });

    // Start initial animations
    Future.delayed(const Duration(milliseconds: 200), () {
      _heroController.forward();
    });
    Future.delayed(const Duration(milliseconds: 400), () {
      _fadeController.forward();
    });
    Future.delayed(const Duration(milliseconds: 600), () {
      _slideController.forward();
    });
  }

  @override
  void dispose() {
    _tabController.dispose();
    _fadeController.dispose();
    _slideController.dispose();
    _heroController.dispose();
    super.dispose();
  }

  // Responsive breakpoints
  bool _isSmallScreen(BuildContext context) {
    return MediaQuery.of(context).size.width < 480;
  }

  bool _isMediumScreen(BuildContext context) {
    return MediaQuery.of(context).size.width >= 480 && MediaQuery.of(context).size.width < 768;
  }

  bool _isLargeScreen(BuildContext context) {
    return MediaQuery.of(context).size.width >= 768;
  }

  double _getResponsivePadding(BuildContext context) {
    final width = MediaQuery.of(context).size.width;
    if (width < 480) return width * 0.04; // 4% for small screens
    if (width < 768) return width * 0.06; // 6% for medium screens
    if (width < 1200) return width * 0.08; // 8% for large screens
    return width * 0.10; // Reduced max padding
  }

  double _getResponsiveFontSize(BuildContext context, double baseSize) {
    final shortestSide = MediaQuery.of(context).size.shortestSide;
    
    // Scale based on shortest side for better consistency across orientations
    if (shortestSide < 360) return baseSize * 0.85; // Very small phones
    if (shortestSide < 480) return baseSize * 0.9;  // Small phones
    if (shortestSide < 600) return baseSize;        // Normal phones
    if (shortestSide < 900) return baseSize * 1.1;  // Large phones/small tablets
    return baseSize * 1.2; // Tablets and larger
  }

  void _showEnhancedSnackBar(String message, {Color? color, IconData? icon}) {
    ScaffoldMessenger.of(context)
      ..removeCurrentSnackBar()
      ..showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.all(_getResponsivePadding(context)),
          backgroundColor: color ?? Theme.of(context).colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(_isSmallScreen(context) ? 12 : 16)
          ),
          elevation: 12,
          content: Container(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              children: [
                if (icon != null) ...[
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(icon, color: Colors.white, size: 18),
                  ),
                  const SizedBox(width: 12),
                ],
                Expanded(
                  child: Text(
                    message,
                    style: GoogleFonts.inter(
                      color: Colors.white,
                      fontWeight: FontWeight.w500,
                      fontSize: _getResponsiveFontSize(context, 14),
                      letterSpacing: 0.1,
                    ),
                  ),
                ),
              ],
            ),
          ),
          duration: const Duration(seconds: 4),
        ),
      );
  }

  Widget _buildGradientBackground() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return AnimatedContainer(
      duration: const Duration(milliseconds: 500),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: isDark 
            ? [
                const Color(0xFF020817),
                const Color(0xFF0F172A),
                const Color(0xFF1E293B).withOpacity(0.8),
              ]
            : [
                const Color(0xFFFBFBFB),
                const Color(0xFFF8FAFC),
                const Color(0xFFF1F5F9).withOpacity(0.8),
              ],
          stops: const [0.0, 0.6, 1.0],
        ),
      ),
    );
  }

  Widget _buildEnhancedAppBar() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final screenSize = MediaQuery.of(context).size;
    final isSmall = _isSmallScreen(context);
    final expandedHeight = isSmall ? 
      (screenSize.height < 600 ? 80.0 : 100.0) : 
      (_isMediumScreen(context) ? 120.0 : 140.0);
    
    return SliverAppBar(
      expandedHeight: expandedHeight,
      floating: false,
      pinned: true,
      elevation: 0,
      // FIX: Add proper background color instead of transparent
      backgroundColor: isDark ? const Color(0xFF0F172A) : const Color(0xFFFBFBFB),
      surfaceTintColor: Colors.transparent,
      flexibleSpace: FlexibleSpaceBar(
        titlePadding: EdgeInsets.only(
          left: _getResponsivePadding(context),
          bottom: isSmall ? 12 : 16,
        ),
        title: AnimatedBuilder(
          animation: _heroAnimation,
          builder: (context, child) {
            return Transform.scale(
              scale: _heroAnimation.value,
              child: Opacity(
                opacity: _heroAnimation.value,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      "YouDon",
                      style: GoogleFonts.inter(
                        fontSize: _getResponsiveFontSize(context, isSmall ? 20 : 24),
                        fontWeight: FontWeight.w900,
                        color: isDark ? const Color(0xFFF8FAFC) : const Color(0xFF0F172A),
                        letterSpacing: -1.0,
                        shadows: isDark ? [
                          Shadow(
                            color: Colors.black.withOpacity(0.3),
                            offset: const Offset(0, 2),
                            blurRadius: 4,
                          ),
                        ] : null,
                      ),
                    ),
                    if (!isSmall || screenSize.height > 600)
                      Text(
                        "Premium YouTube Downloader",
                        style: GoogleFonts.inter(
                          fontSize: _getResponsiveFontSize(context, 10),
                          fontWeight: FontWeight.w500,
                          color: isDark 
                              ? const Color(0xFF8B5CF6) 
                              : const Color(0xFF6366F1),
                          letterSpacing: 0.5,
                        ),
                      ),
                  ],
                ),
              ),
            );
          },
        ),
        background: Stack(
          children: [
            _buildGradientBackground(),
            Positioned(
              top: -50,
              right: -50,
              child: AnimatedBuilder(
                animation: _heroAnimation,
                builder: (context, child) {
                  final circleSize = isSmall ? 120.0 : (_isMediumScreen(context) ? 150.0 : 200.0);
                  return Transform.scale(
                    scale: _heroAnimation.value * 0.8,
                    child: Container(
                      width: circleSize,
                      height: circleSize,
                      decoration: BoxDecoration(
                        shape: BoxShape.circle,
                        gradient: LinearGradient(
                          colors: [
                            const Color(0xFF6366F1).withOpacity(0.1),
                            const Color(0xFF8B5CF6).withOpacity(0.05),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
      actions: [
        Consumer<ThemeNotifier>(
          builder: (context, themeNotifier, child) {
            return Container(
              margin: EdgeInsets.only(right: _getResponsivePadding(context)),
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 400),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: isDark 
                        ? [
                            const Color(0xFF334155).withOpacity(0.8),
                            const Color(0xFF475569).withOpacity(0.6),
                          ]
                        : [
                            const Color(0xFFF1F5F9),
                            const Color(0xFFE2E8F0),
                          ],
                  ),
                  borderRadius: BorderRadius.circular(14),
                  border: Border.all(
                    color: isDark 
                        ? const Color(0xFF475569).withOpacity(0.3)
                        : const Color(0xFFCBD5E1).withOpacity(0.5),
                    width: 1,
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(isDark ? 0.2 : 0.05),
                      blurRadius: 8,
                      offset: const Offset(0, 2),
                    ),
                  ],
                ),
                child: IconButton(
                  iconSize: isSmall ? 18 : 20,
                  icon: AnimatedSwitcher(
                    duration: const Duration(milliseconds: 500),
                    transitionBuilder: (child, animation) {
                      return RotationTransition(
                        turns: animation,
                        child: ScaleTransition(scale: animation, child: child),
                      );
                    },
                    child: Icon(
                      themeNotifier.themeMode == ThemeMode.dark
                          ? Icons.light_mode_rounded
                          : Icons.dark_mode_rounded,
                      key: ValueKey(themeNotifier.themeMode),
                      color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF475569),
                      size: isSmall ? 18 : 20,
                    ),
                  ),
                  onPressed: () {
                    themeNotifier.toggleTheme();
                    _showEnhancedSnackBar(
                      themeNotifier.themeMode == ThemeMode.dark
                          ? "Welcome to the dark side ✨"
                          : "Light mode activated ☀️",
                      color: themeNotifier.themeMode == ThemeMode.dark
                          ? const Color(0xFF6366F1)
                          : const Color(0xFFF59E0B),
                      icon: themeNotifier.themeMode == ThemeMode.dark
                          ? Icons.dark_mode_rounded
                          : Icons.light_mode_rounded,
                    );
                  },
                  tooltip: themeNotifier.themeMode == ThemeMode.dark
                      ? "Switch to Light Mode"
                      : "Switch to Dark Mode",
                ),
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildEnhancedTabBar() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final horizontalPadding = _getResponsivePadding(context);
    final isSmall = _isSmallScreen(context);
    
    return AnimatedBuilder(
      animation: _fadeAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, 20 * (1 - _fadeAnimation.value)),
          child: Opacity(
            opacity: _fadeAnimation.value,
            child: Container(
              margin: EdgeInsets.symmetric(horizontal: horizontalPadding, vertical: isSmall ? 12 : 16),
              padding: const EdgeInsets.all(4),
              decoration: BoxDecoration(
                color: isDark ? const Color(0xFF1E293B) : const Color(0xFFF8FAFC),
                borderRadius: BorderRadius.circular(isSmall ? 12 : 14),
                border: Border.all(
                  color: isDark 
                      ? const Color(0xFF334155).withOpacity(0.5)
                      : const Color(0xFFE2E8F0).withOpacity(0.8),
                  width: 1.5,
                ),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(isDark ? 0.3 : 0.08),
                    blurRadius: 16,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: TabBar(
                controller: _tabController,
                indicator: BoxDecoration(
                  borderRadius: BorderRadius.circular(isSmall ? 8 : 10),
                  gradient: const LinearGradient(
                    colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
                    begin: Alignment.centerLeft,
                    end: Alignment.centerRight,
                  ),
                  boxShadow: [
                    BoxShadow(
                      color: const Color(0xFF6366F1).withOpacity(0.4),
                      blurRadius: 12,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                indicatorSize: TabBarIndicatorSize.tab,
                dividerColor: Colors.transparent,
                labelColor: Colors.white,
                unselectedLabelColor: isDark 
                    ? const Color(0xFF94A3B8) 
                    : const Color(0xFF64748B),
                labelStyle: GoogleFonts.inter(
                  fontWeight: FontWeight.w600,
                  fontSize: _getResponsiveFontSize(context, 13),
                  letterSpacing: 0.2,
                ),
                unselectedLabelStyle: GoogleFonts.inter(
                  fontWeight: FontWeight.w500,
                  fontSize: _getResponsiveFontSize(context, 13),
                  letterSpacing: 0.2,
                ),
                tabs: [
                  Tab(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 200),
                          child: Icon(
                            Icons.download_rounded,
                            size: _currentTabIndex == 0 ? 
                              (isSmall ? 16 : 18) : 
                              (isSmall ? 14 : 16),
                          ),
                        ),
                        SizedBox(width: isSmall ? 4 : 6),
                        const Flexible(child: Text('Active')),
                      ],
                    ),
                  ),
                  Tab(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        AnimatedContainer(
                          duration: const Duration(milliseconds: 200),
                          child: Icon(
                            Icons.check_circle_rounded,
                            size: _currentTabIndex == 1 ? 
                              (isSmall ? 16 : 18) : 
                              (isSmall ? 14 : 16),
                          ),
                        ),
                        SizedBox(width: isSmall ? 4 : 6),
                        const Flexible(child: Text('Completed')),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildEnhancedFooter() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final isSmall = _isSmallScreen(context);
    
    return Container(
      padding: EdgeInsets.symmetric(vertical: isSmall ? 16 : 24),
      child: Column(
        children: [
          Container(
            height: 1,
            margin: EdgeInsets.symmetric(horizontal: _getResponsivePadding(context) * 2),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  Colors.transparent,
                  (isDark ? const Color(0xFF334155) : const Color(0xFFE2E8F0))
                      .withOpacity(0.6),
                  Colors.transparent,
                ],
              ),
            ),
          ),
          SizedBox(height: isSmall ? 12 : 16),
          Wrap(
            alignment: WrapAlignment.center,
            crossAxisAlignment: WrapCrossAlignment.center,
            children: [
              Text(
                "Crafted with ",
                style: GoogleFonts.inter(
                  fontSize: _getResponsiveFontSize(context, 12),
                  color: isDark 
                      ? const Color(0xFF94A3B8) 
                      : const Color(0xFF64748B),
                  fontWeight: FontWeight.w400,
                  letterSpacing: 0.2,
                ),
              ),
              Text(
                "❤️",
                style: TextStyle(fontSize: _getResponsiveFontSize(context, 12)),
              ),
              Text(
                " by ",
                style: GoogleFonts.inter(
                  fontSize: _getResponsiveFontSize(context, 12),
                  color: isDark 
                      ? const Color(0xFF94A3B8) 
                      : const Color(0xFF64748B),
                  fontWeight: FontWeight.w400,
                  letterSpacing: 0.2,
                ),
              ),
              ShaderMask(
                shaderCallback: (bounds) => const LinearGradient(
                  colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
                ).createShader(bounds),
                child: Text(
                  "Aryan Mishra",
                  style: GoogleFonts.inter(
                    fontSize: _getResponsiveFontSize(context, 12),
                    color: Colors.white,
                    fontWeight: FontWeight.w700,
                    letterSpacing: 0.2,
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final horizontalPadding = _getResponsivePadding(context);
    
    // Listen for DownloadManager messages
    WidgetsBinding.instance.addPostFrameCallback((_) {
      final downloadManager = Provider.of<DownloadManager>(context, listen: false);
      if (downloadManager.uiMessage != null) {
        final msg = downloadManager.uiMessage!;
        _showEnhancedSnackBar(msg.text, color: msg.color, icon: msg.icon);
        downloadManager.clearMessage();
      }
    });

    return Scaffold(
      body: Stack(
        children: [
          _buildGradientBackground(),
          // FIX: Replace NestedScrollView with CustomScrollView for better layout handling
          CustomScrollView(
            slivers: [
              _buildEnhancedAppBar(),
              SliverToBoxAdapter(
                child: _buildEnhancedTabBar(),
              ),
              SliverToBoxAdapter(
                child: AnimatedBuilder(
                  animation: _fadeAnimation,
                  builder: (context, child) {
                    return AnimatedContainer(
                      duration: const Duration(milliseconds: 600),
                      curve: Curves.easeInOutCubic,
                      height: _showDownloadInput ? null : 0,
                      child: Opacity(
                        opacity: _fadeAnimation.value,
                        child: _showDownloadInput
                            ? Padding(
                                padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
                                child: SlideTransition(
                                  position: _slideAnimation,
                                  child: const DownloadInput(),
                                ),
                              )
                            : const SizedBox(),
                      ),
                    );
                  },
                ),
              ),
              SliverToBoxAdapter(
                child: SizedBox(height: _isSmallScreen(context) ? 12 : 16),
              ),
              // FIX: Use SliverToBoxAdapter with fixed height for TabBarView
              SliverToBoxAdapter(
                child: Container(
                  height: MediaQuery.of(context).size.height * 0.6, // Fixed height to prevent overflow
                  padding: EdgeInsets.symmetric(horizontal: horizontalPadding),
                  child: TabBarView(
                    controller: _tabController,
                    children: const [
                      OngoingTasks(),
                      CompletedTasks(),
                    ],
                  ),
                ),
              ),
              SliverToBoxAdapter(
                child: _buildEnhancedFooter(),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

----------------------------------------
File Location: lib\screens\components\completed_tasks.dart
File Name: completed_tasks.dart
File Code:
// lib/screens/components/completed_tasks.dart

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import '/models/download_manager.dart';
import 'package:open_file/open_file.dart';
import 'dart:io';
import 'package:path/path.dart' as path;
import 'dart:math';
import 'package:flutter/foundation.dart';

class CompletedTasks extends StatefulWidget {
  const CompletedTasks({super.key});

  @override
  State<CompletedTasks> createState() => _CompletedTasksState();
}

class _CompletedTasksState extends State<CompletedTasks>
    with TickerProviderStateMixin {
  bool _recentFirst = true;
  late AnimationController _listAnimationController;

  @override
  void initState() {
    super.initState();
    _listAnimationController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    _listAnimationController.forward();
  }

  @override
  void dispose() {
    _listAnimationController.dispose();
    super.dispose();
  }

  IconData _getFormatIcon(String format) {
    switch (format) {
      case 'mp3':
        return Icons.audiotrack_rounded;
      case 'mp4':
        return Icons.videocam_rounded;
      default:
        return Icons.insert_drive_file_rounded;
    }
  }

  Color _getFormatColor(String format, BuildContext context) {
    switch (format) {
      case 'mp3':
        return const Color(0xFF8B5CF6);
      case 'mp4':
        return const Color(0xFF3B82F6);
      default:
        return const Color(0xFF64748B);
    }
  }

  void _showSnackBar(BuildContext context, String message, {Color? color, IconData? icon}) {
    ScaffoldMessenger.of(context)
      ..removeCurrentSnackBar()
      ..showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.symmetric(
            horizontal: MediaQuery.of(context).size.width * 0.05,
            vertical: 16,
          ),
          backgroundColor: color ?? const Color(0xFF6366F1),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 12,
          content: Container(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              children: [
                if (icon != null) ...[
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(icon, color: Colors.white, size: 18),
                  ),
                  const SizedBox(width: 12),
                ],
                Expanded(
                  child: Text(
                    message,
                    style: GoogleFonts.inter(
                      color: Colors.white,
                      fontWeight: FontWeight.w500,
                      fontSize: 14,
                    ),
                  ),
                ),
              ],
            ),
          ),
          duration: const Duration(seconds: 4),
        ),
      );
  }

  // Enhanced similarity function for fuzzy matching
  double _calculateSimilarity(String s1, String s2) {
    if (s1 == s2) return 1.0;
    if (s1.isEmpty || s2.isEmpty) return 0.0;

    s1 = s1.toLowerCase();
    s2 = s2.toLowerCase();

    final len1 = s1.length;
    final len2 = s2.length;
    final maxLen = max(len1, len2);
    if (maxLen == 0) return 1.0;

    final distance = _levenshteinDistance(s1, s2);
    return 1.0 - (distance / maxLen);
  }

  int _levenshteinDistance(String s1, String s2) {
    final len1 = s1.length;
    final len2 = s2.length;

    final List<List<int>> matrix = List<List<int>>.generate(
      len1 + 1,
      (_) => List<int>.filled(len2 + 1, 0, growable: false),
      growable: false,
    );

    for (int i = 0; i <= len1; i++) {
      matrix[i][0] = i;
    }
    for (int j = 0; j <= len2; j++) {
      matrix[0][j] = j;
    }

    for (int i = 1; i <= len1; i++) {
      for (int j = 1; j <= len2; j++) {
        final cost = s1[i - 1] == s2[j - 1] ? 0 : 1;
        matrix[i][j] = [
          matrix[i - 1][j] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j - 1] + cost
        ].reduce(min);
      }
    }

    return matrix[len1][len2];
  }

  String _sanitizeFileName(String fileName) {
    String sanitized = fileName;
    sanitized = sanitized.replaceAll(RegExp(r'\.[fF]\d+'), '');
    sanitized = sanitized.replaceAll(RegExp(r'\s+'), ' ');
    sanitized = sanitized.replaceAll(RegExp(r'[""｜|•·\-_()\[\]]'), '');
    sanitized = sanitized.replaceAll(
      RegExp(r'\b(full|song|with|lyrics|video|audio|official|hd|4k)\b', caseSensitive: false),
      '',
    );
    sanitized = sanitized.replaceAll(RegExp(r'\s+'), ' ');
    return sanitized.trim();
  }

  String? _findBestMatch(
    String targetName,
    List<FileSystemEntity> files,
    String format, {
    double threshold = 0.65,
  }) {
    final sanitizedTarget = _sanitizeFileName(targetName);
    debugPrint("DEBUG: Looking for fuzzy match for: '$sanitizedTarget'");

    final List<String> validExtensions = format == 'mp3'
        ? ['.mp3', '.m4a', '.aac', '.opus', '.wav', '.flac']
        : ['.mp4', '.mkv', '.webm', '.mov', '.avi'];

    String? bestMatch;
    double bestSimilarity = 0.0;

    for (final file in files) {
      if (file is File) {
        final fileName = path.basename(file.path);
        final fileExtension = path.extension(file.path).toLowerCase();

        if (!validExtensions.contains(fileExtension)) continue;

        final fileNameWithoutExt = path.basenameWithoutExtension(fileName);
        final sanitizedFileName = _sanitizeFileName(fileNameWithoutExt);

        double similarity = _calculateSimilarity(sanitizedTarget, sanitizedFileName);

        if (similarity < threshold) {
          if (sanitizedTarget.contains(sanitizedFileName) || sanitizedFileName.contains(sanitizedTarget)) {
            final containsSimilarity =
                min(sanitizedTarget.length, sanitizedFileName.length) /
                    max(sanitizedTarget.length, sanitizedFileName.length).toDouble();
            if (containsSimilarity > 0.5) {
              similarity = max(similarity, containsSimilarity);
            }
          }
        }

        if (similarity > bestSimilarity && similarity >= threshold) {
          bestSimilarity = similarity;
          bestMatch = file.path;
        }
      }
    }

    return bestMatch;
  }

  Future<void> _openFile(String? storedFileName, String downloadPath, String format) async {
    if (storedFileName == null || storedFileName.isEmpty) {
      _showSnackBar(
        context,
        "File path not available.",
        color: const Color(0xFFEF4444),
        icon: Icons.error_outline_rounded,
      );
      return;
    }

    try {
      String? actualFilePath;

      final originalFile = File(storedFileName);
      if (await originalFile.exists()) {
        actualFilePath = storedFileName;
      }

      if (actualFilePath == null) {
        final dir = Directory(downloadPath);
        if (await dir.exists()) {
          final files = await dir.list(recursive: true, followLinks: false).toList();
          final targetName = path.basenameWithoutExtension(storedFileName);
          
          actualFilePath = _findBestMatch(targetName, files, format, threshold: 0.75) ??
              _findBestMatch(targetName, files, format, threshold: 0.65) ??
              _findBestMatch(targetName, files, format, threshold: 0.55);
        }
      }

      if (actualFilePath == null) {
        if (!mounted) return;
        _showSnackBar(
          context,
          "File not found in download location",
          color: const Color(0xFFEF4444),
          icon: Icons.error_outline_rounded,
        );
        return;
      }

      final result = await OpenFile.open(actualFilePath);
      if (!mounted) return;

      switch (result.type) {
        case ResultType.done:
          _showSnackBar(
            context,
            "File opened successfully! 🎉",
            color: const Color(0xFF10B981),
            icon: Icons.check_circle_rounded,
          );
          break;
        case ResultType.fileNotFound:
          _showSnackBar(
            context,
            "File not found by system",
            color: const Color(0xFFEF4444),
            icon: Icons.error_outline_rounded,
          );
          break;
        case ResultType.noAppToOpen:
          _showSnackBar(
            context,
            "No app found to open this file type.",
            color: const Color(0xFFF59E0B),
            icon: Icons.warning_rounded,
          );
          break;
        case ResultType.permissionDenied:
          _showSnackBar(
            context,
            "Permission denied to open file.",
            color: const Color(0xFFEF4444),
            icon: Icons.block_rounded,
          );
          break;
        default:
          _showSnackBar(
            context,
            "Could not open file: ${result.message}",
            color: const Color(0xFFEF4444),
            icon: Icons.error_outline_rounded,
          );
      }
    } catch (e) {
      if (!mounted) return;
      _showSnackBar(
        context,
        "Error opening file: ${e.toString()}",
        color: const Color(0xFFEF4444),
        icon: Icons.error_outline_rounded,
      );
    }
  }

  Future<void> _openFolder(String downloadPath, {String? targetFile}) async {
    try {
      String pathToOpen = downloadPath;
      if (targetFile != null && targetFile.isNotEmpty) {
        final parent = path.dirname(targetFile);
        if (await Directory(parent).exists()) {
          pathToOpen = parent;
        }
      }

      final result = await OpenFile.open(pathToOpen);
      if (!mounted) return;

      if (result.type == ResultType.done) {
        _showSnackBar(
          context,
          "Folder opened successfully! 📁",
          color: const Color(0xFF10B981),
          icon: Icons.folder_open_rounded,
        );
      } else {
        _showSnackBar(
          context,
          "Could not open folder.",
          color: const Color(0xFFF59E0B),
          icon: Icons.warning_rounded,
        );
      }
    } catch (e) {
      if (!mounted) return;
      _showSnackBar(
        context,
        "Error opening folder: ${e.toString()}",
        color: const Color(0xFFEF4444),
        icon: Icons.error_outline_rounded,
      );
    }
  }

  Widget _buildQuickAction({
    required IconData icon,
    required Color color,
    required VoidCallback onPressed,
    required String tooltip,
  }) {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 2),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          borderRadius: BorderRadius.circular(10),
          child: Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(10),
              border: Border.all(
                color: color.withOpacity(0.2),
                width: 1,
              ),
            ),
            child: Icon(
              icon,
              color: color,
              size: 16,
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTaskCard(task, int index) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final formatColor = _getFormatColor(task.format, context);
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 500;

    String displayName;
    if (task.fileName != null && task.fileName!.isNotEmpty) {
      final base = path.basename(task.fileName!);
      final baseNoExt = path.basenameWithoutExtension(base);
      final ext = path.extension(base);
      displayName = '${_sanitizeFileName(baseNoExt)}$ext';
    } else {
      displayName = task.url;
    }

    return AnimatedBuilder(
      animation: _listAnimationController,
      builder: (context, child) {
        final slideAnimation = Tween<Offset>(
          begin: const Offset(1, 0),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _listAnimationController,
          curve: Interval(
            (index * 0.1).clamp(0.0, 1.0),
            ((index * 0.1) + 0.3).clamp(0.0, 1.0),
            curve: Curves.easeOutBack,
          ),
        ));

        final fadeAnimation = Tween<double>(
          begin: 0.0,
          end: 1.0,
        ).animate(CurvedAnimation(
          parent: _listAnimationController,
          curve: Interval(
            (index * 0.05).clamp(0.0, 1.0),
            ((index * 0.05) + 0.5).clamp(0.0, 1.0),
            curve: Curves.easeOut,
          ),
        ));

        return SlideTransition(
          position: slideAnimation,
          child: FadeTransition(
            opacity: fadeAnimation,
            child: Container(
              margin: const EdgeInsets.symmetric(vertical: 6, horizontal: 2),
              child: Material(
                elevation: 0,
                borderRadius: BorderRadius.circular(16),
                color: Colors.transparent,
                child: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                      colors: isDark
                          ? [
                              const Color(0xFF1E293B),
                              const Color(0xFF0F172A).withOpacity(0.8),
                            ]
                          : [
                              Colors.white,
                              const Color(0xFFF8FAFC),
                            ],
                    ),
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(
                      color: isDark 
                          ? const Color(0xFF334155).withOpacity(0.3)
                          : const Color(0xFFE2E8F0).withOpacity(0.8),
                      width: 1.5,
                    ),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withOpacity(isDark ? 0.3 : 0.05),
                        blurRadius: 16,
                        offset: const Offset(0, 4),
                        spreadRadius: 0,
                      ),
                      BoxShadow(
                        color: formatColor.withOpacity(0.05),
                        blurRadius: 24,
                        offset: const Offset(0, 8),
                        spreadRadius: -4,
                      ),
                    ],
                  ),
                  child: Material(
                    color: Colors.transparent,
                    child: InkWell(
                      onTap: () => _openFile(task.fileName, task.downloadPath, task.format),
                      borderRadius: BorderRadius.circular(16),
                      child: Padding(
                        padding: EdgeInsets.all(isSmallScreen ? 14 : 18),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Main content row
                            Row(
                              children: [
                                // Format Icon
                                Container(
                                  padding: EdgeInsets.all(isSmallScreen ? 10 : 12),
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [
                                        formatColor,
                                        formatColor.withOpacity(0.8),
                                      ],
                                    ),
                                    borderRadius: BorderRadius.circular(12),
                                    boxShadow: [
                                      BoxShadow(
                                        color: formatColor.withOpacity(0.3),
                                        blurRadius: 8,
                                        offset: const Offset(0, 2),
                                      ),
                                    ],
                                  ),
                                  child: Icon(
                                    _getFormatIcon(task.format),
                                    color: Colors.white,
                                    size: isSmallScreen ? 18 : 20,
                                  ),
                                ),
                                
                                const SizedBox(width: 12),
                                
                                // Content - Make expandable
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        displayName,
                                        maxLines: 2,
                                        overflow: TextOverflow.ellipsis,
                                        style: GoogleFonts.inter(
                                          fontSize: isSmallScreen ? 14 : 15,
                                          fontWeight: FontWeight.w600,
                                          color: isDark ? const Color(0xFFF8FAFC) : const Color(0xFF0F172A),
                                          height: 1.3,
                                        ),
                                      ),
                                      const SizedBox(height: 6),
                                      // Tags row - Make them wrap properly
                                      Wrap(
                                        spacing: 6,
                                        runSpacing: 4,
                                        children: [
                                          Container(
                                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                                            decoration: BoxDecoration(
                                              color: task.format == "mp3" 
                                                  ? const Color(0xFF8B5CF6).withOpacity(0.1)
                                                  : const Color(0xFF3B82F6).withOpacity(0.1),
                                              borderRadius: BorderRadius.circular(6),
                                              border: Border.all(
                                                color: task.format == "mp3" 
                                                    ? const Color(0xFF8B5CF6).withOpacity(0.3)
                                                    : const Color(0xFF3B82F6).withOpacity(0.3),
                                                width: 1,
                                              ),
                                            ),
                                            child: Text(
                                              task.format == "mp3" ? "Audio" : "Video",
                                              style: GoogleFonts.inter(
                                                fontSize: 11,
                                                fontWeight: FontWeight.w600,
                                                color: task.format == "mp3" 
                                                    ? const Color(0xFF8B5CF6)
                                                    : const Color(0xFF3B82F6),
                                              ),
                                            ),
                                          ),
                                          Container(
                                            padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 3),
                                            decoration: BoxDecoration(
                                              color: const Color(0xFF10B981).withOpacity(0.1),
                                              borderRadius: BorderRadius.circular(6),
                                              border: Border.all(
                                                color: const Color(0xFF10B981).withOpacity(0.3),
                                                width: 1,
                                              ),
                                            ),
                                            child: Text(
                                              task.mode == "playlist" ? "Playlist" : "Single",
                                              style: GoogleFonts.inter(
                                                fontSize: 11,
                                                fontWeight: FontWeight.w600,
                                                color: const Color(0xFF10B981),
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            ),
                            
                            const SizedBox(height: 12),
                            
                            // Action Buttons - Make them responsive
                            if (isSmallScreen)
                              // Stack vertically on small screens
                              Column(
                                children: [
                                  Row(
                                    children: [
                                      Expanded(
                                        child: _buildQuickAction(
                                          icon: Icons.refresh_rounded,
                                          color: const Color(0xFF6366F1),
                                          onPressed: () {
                                            final downloadManager = Provider.of<DownloadManager>(context, listen: false);
                                            downloadManager.requeueTask(task);
                                          },
                                          tooltip: "Download Again",
                                        ),
                                      ),
                                      Expanded(
                                        child: _buildQuickAction(
                                          icon: Icons.play_arrow_rounded,
                                          color: const Color(0xFF3B82F6),
                                          onPressed: () => _openFile(task.fileName, task.downloadPath, task.format),
                                          tooltip: "Open File",
                                        ),
                                      ),
                                    ],
                                  ),
                                  const SizedBox(height: 8),
                                  Row(
                                    children: [
                                      Expanded(
                                        child: _buildQuickAction(
                                          icon: Icons.folder_open_rounded,
                                          color: const Color(0xFF10B981),
                                          onPressed: () => _openFolder(task.downloadPath, targetFile: task.fileName),
                                          tooltip: "Open Folder",
                                        ),
                                      ),
                                      Expanded(
                                        child: _buildQuickAction(
                                          icon: Icons.delete_rounded,
                                          color: const Color(0xFFEF4444),
                                          onPressed: () {
                                            final downloadManager = Provider.of<DownloadManager>(context, listen: false);
                                            downloadManager.removeCompletedTask(task);
                                          },
                                          tooltip: "Remove from List",
                                        ),
                                      ),
                                    ],
                                  ),
                                ],
                              )
                            else
                              // Keep horizontal on larger screens
                              Row(
                                mainAxisAlignment: MainAxisAlignment.end,
                                children: [
                                  _buildQuickAction(
                                    icon: Icons.refresh_rounded,
                                    color: const Color(0xFF6366F1),
                                    onPressed: () {
                                      final downloadManager = Provider.of<DownloadManager>(context, listen: false);
                                      downloadManager.requeueTask(task);
                                    },
                                    tooltip: "Download Again",
                                  ),
                                  _buildQuickAction(
                                    icon: Icons.play_arrow_rounded,
                                    color: const Color(0xFF3B82F6),
                                    onPressed: () => _openFile(task.fileName, task.downloadPath, task.format),
                                    tooltip: "Open File",
                                  ),
                                  _buildQuickAction(
                                    icon: Icons.folder_open_rounded,
                                    color: const Color(0xFF10B981),
                                    onPressed: () => _openFolder(task.downloadPath, targetFile: task.fileName),
                                    tooltip: "Open Folder",
                                  ),
                                  _buildQuickAction(
                                    icon: Icons.delete_rounded,
                                    color: const Color(0xFFEF4444),
                                    onPressed: () {
                                      final downloadManager = Provider.of<DownloadManager>(context, listen: false);
                                      downloadManager.removeCompletedTask(task);
                                    },
                                    tooltip: "Remove from List",
                                  ),
                                ],
                              ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildHeader(int completedCount) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 500;
    
    return Container(
      margin: const EdgeInsets.only(bottom: 20),
      child: Column(
        children: [
          Flex(
            direction: isSmallScreen ? Axis.vertical : Axis.horizontal,
            crossAxisAlignment: isSmallScreen ? CrossAxisAlignment.start : CrossAxisAlignment.center,
            children: [
              Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [Color(0xFF10B981), Color(0xFF059669)],
                      ),
                      borderRadius: BorderRadius.circular(14),
                      boxShadow: [
                        BoxShadow(
                          color: const Color(0xFF10B981).withOpacity(0.3),
                          blurRadius: 12,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: const Icon(
                      Icons.check_circle_rounded,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Flexible(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(
                          "Completed Downloads",
                          style: GoogleFonts.inter(
                            fontSize: isSmallScreen ? 18 : 20,
                            fontWeight: FontWeight.w700,
                            color: isDark ? const Color(0xFFF8FAFC) : const Color(0xFF0F172A),
                            letterSpacing: -0.4,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          "$completedCount downloads completed",
                          style: GoogleFonts.inter(
                            fontSize: 13,
                            fontWeight: FontWeight.w500,
                            color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              SizedBox(width: isSmallScreen ? 0 : 16, height: isSmallScreen ? 16 : 0),
              Container(
                padding: const EdgeInsets.all(3),
                decoration: BoxDecoration(
                  color: isDark ? const Color(0xFF1E293B) : const Color(0xFFF8FAFC),
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(
                    color: isDark 
                        ? const Color(0xFF334155).withOpacity(0.5)
                        : const Color(0xFFE2E8F0),
                    width: 1,
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Material(
                      color: Colors.transparent,
                      child: InkWell(
                        onTap: () => setState(() => _recentFirst = !_recentFirst),
                        borderRadius: BorderRadius.circular(8),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(
                                _recentFirst ? Icons.arrow_downward_rounded : Icons.arrow_upward_rounded,
                                size: 16,
                                color: const Color(0xFF3B82F6),
                              ),
                              const SizedBox(width: 6),
                              Text(
                                _recentFirst ? "Recent" : "Oldest",
                                style: GoogleFonts.inter(
                                  fontSize: 12,
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xFF3B82F6),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    Container(
                      height: 20,
                      width: 1,
                      color: isDark 
                          ? const Color(0xFF334155).withOpacity(0.5)
                          : const Color(0xFFE2E8F0),
                    ),
                    Material(
                      color: Colors.transparent,
                      child: InkWell(
                        onTap: () {
                          final downloadManager = Provider.of<DownloadManager>(context, listen: false);
                          downloadManager.clearAllCompletedTasks();
                        },
                        borderRadius: BorderRadius.circular(8),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              const Icon(
                                Icons.delete_sweep_rounded,
                                size: 16,
                                color: Color(0xFFEF4444),
                              ),
                              const SizedBox(width: 6),
                              Text(
                                "Clear",
                                style: GoogleFonts.inter(
                                  fontSize: 12,
                                  fontWeight: FontWeight.w600,
                                  color: const Color(0xFFEF4444),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildEmptyState() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: isDark 
                  ? const Color(0xFF1E293B).withOpacity(0.5)
                  : const Color(0xFFF8FAFC),
              borderRadius: BorderRadius.circular(20),
              border: Border.all(
                color: isDark 
                    ? const Color(0xFF334155).withOpacity(0.3)
                    : const Color(0xFFE2E8F0),
                width: 2,
              ),
            ),
            child: Icon(
              Icons.download_done_rounded,
              size: 48,
              color: isDark 
                  ? const Color(0xFF64748B) 
                  : const Color(0xFF94A3B8),
            ),
          ),
          const SizedBox(height: 20),
          Text(
            "No completed downloads yet",
            style: GoogleFonts.inter(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
            ),
          ),
          const SizedBox(height: 8),
          Text(
            "Your completed downloads will appear here",
            style: GoogleFonts.inter(
              fontSize: 14,
              color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF6B7280),
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<DownloadManager>(
      builder: (context, downloadManager, child) {
        var completed = List.of(downloadManager.completedTasks);
        if (_recentFirst) {
          completed = completed.reversed.toList();
        }

        if (completed.isEmpty) {
          return _buildEmptyState();
        }

        return Column(
          children: [
            _buildHeader(completed.length),
            Expanded(
              child: ListView.builder(
                padding: const EdgeInsets.symmetric(vertical: 6),
                itemCount: completed.length,
                itemBuilder: (context, index) {
                  final task = completed[index];
                  return _buildTaskCard(task, index);
                },
              ),
            ),
          ],
        );
      },
    );
  }
}

----------------------------------------
File Location: lib\screens\components\download_input.dart
File Name: download_input.dart
File Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import '/models/download_manager.dart';
import '/models/download_task.dart';

class DownloadInput extends StatefulWidget {
  const DownloadInput({super.key});

  @override
  State<DownloadInput> createState() => _DownloadInputState();
}

class _DownloadInputState extends State<DownloadInput>
    with TickerProviderStateMixin {
  final TextEditingController _urlController = TextEditingController();
  String _selectedFormat = "mp4";
  String _selectedMode = "single";
  
  late AnimationController _bounceController;
  late AnimationController _shimmerController;
  late Animation<double> _bounceAnimation;
  late Animation<double> _shimmerAnimation;
  
  bool _isHovering = false;
  final FocusNode _urlFocusNode = FocusNode();

  @override
  void initState() {
    super.initState();
    
    _bounceController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    
    _shimmerController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat();
    
    _bounceAnimation = Tween<double>(
      begin: 1.0,
      end: 1.05,
    ).animate(CurvedAnimation(
      parent: _bounceController,
      curve: Curves.elasticOut,
    ));
    
    _shimmerAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _shimmerController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _urlController.dispose();
    _urlFocusNode.dispose();
    _bounceController.dispose();
    _shimmerController.dispose();
    super.dispose();
  }

  void _showSnackBar(String message, {Color? color, IconData? icon}) {
    ScaffoldMessenger.of(context)
      ..removeCurrentSnackBar()
      ..showSnackBar(
        SnackBar(
          behavior: SnackBarBehavior.floating,
          margin: EdgeInsets.symmetric(
            horizontal: MediaQuery.of(context).size.width * 0.05,
            vertical: 16,
          ),
          backgroundColor: color ?? Theme.of(context).colorScheme.primary,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
          elevation: 12,
          content: Container(
            padding: const EdgeInsets.symmetric(vertical: 4),
            child: Row(
              children: [
                if (icon != null) ...[
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.15),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Icon(icon, color: Colors.white, size: 18),
                  ),
                  const SizedBox(width: 12),
                ],
                Expanded(
                  child: Text(
                    message,
                    style: GoogleFonts.inter(
                      color: Colors.white,
                      fontWeight: FontWeight.w500,
                      fontSize: 14,
                      letterSpacing: 0.1,
                    ),
                  ),
                ),
              ],
            ),
          ),
          duration: const Duration(seconds: 4),
        ),
      );
  }

  void _addToQueue() async {
    final downloadManager = Provider.of<DownloadManager>(context, listen: false);
    final url = _urlController.text.trim();

    // Trigger bounce animation
    _bounceController.forward().then((_) {
      _bounceController.reverse();
    });

    if (url.isEmpty) {
      _showSnackBar(
        "Please enter a YouTube URL first.",
        color: const Color(0xFFEF4444),
        icon: Icons.error_outline_rounded,
      );
      _urlFocusNode.requestFocus();
      return;
    }

    if (downloadManager.downloadPath == null) {
      _showSnackBar(
        "Please select a download destination folder.",
        color: const Color(0xFFEF4444),
        icon: Icons.folder_off_rounded,
      );
      return;
    }

    final newTask = DownloadTask(
      url: url,
      format: _selectedFormat,
      mode: _selectedMode,
      downloadPath: downloadManager.downloadPath!,
    );

    downloadManager.addToQueue(newTask);
    _urlController.clear();
    
    _showSnackBar(
      _selectedFormat == "mp3" 
        ? "🎵 Audio download queued with premium quality"
        : "🎬 Video download queued with best resolution",
      color: const Color(0xFF10B981),
      icon: Icons.check_circle_rounded,
    );
  }

  Widget _buildGradientCard() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final screenWidth = MediaQuery.of(context).size.width;
    final screenHeight = MediaQuery.of(context).size.height;
    final isSmallScreen = screenHeight < 600 || screenWidth < 400;
    
    return AnimatedBuilder(
      animation: _bounceAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: _bounceAnimation.value,
          child: Container(
            constraints: BoxConstraints(
              maxWidth: screenWidth * 0.95,
            ),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(isSmallScreen ? 18 : 24),
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: isDark
                    ? [
                        const Color(0xFF1E293B),
                        const Color(0xFF0F172A),
                      ]
                    : [
                        Colors.white,
                        const Color(0xFFF8FAFC),
                      ],
              ),
              border: Border.all(
                color: isDark 
                    ? const Color(0xFF334155).withOpacity(0.3)
                    : const Color(0xFFE2E8F0).withOpacity(0.8),
                width: 1.5,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(isDark ? 0.4 : 0.08),
                  blurRadius: 24,
                  offset: const Offset(0, 8),
                  spreadRadius: 0,
                ),
                BoxShadow(
                  color: const Color(0xFF6366F1).withOpacity(0.1),
                  blurRadius: 40,
                  offset: const Offset(0, 16),
                  spreadRadius: -8,
                ),
              ],
            ),
            child: child,
          ),
        );
      },
      child: Padding(
        padding: EdgeInsets.all(isSmallScreen ? 20.0 : 28.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            _buildHeader(),
            SizedBox(height: isSmallScreen ? 20 : 32),
            _buildUrlInput(),
            SizedBox(height: isSmallScreen ? 16 : 24),
            _buildFormatAndModeRow(),
            SizedBox(height: isSmallScreen ? 16 : 24),
            _buildQualityInfoCard(),
            SizedBox(height: isSmallScreen ? 16 : 24),
            _buildFolderSelection(),
            SizedBox(height: isSmallScreen ? 20 : 32),
            _buildDownloadButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildHeader() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 400;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Flex(
          direction: isSmallScreen ? Axis.vertical : Axis.horizontal,
          crossAxisAlignment: isSmallScreen ? CrossAxisAlignment.start : CrossAxisAlignment.center,
          children: [
            Container(
              padding: const EdgeInsets.all(10),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
                ),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFF6366F1).withOpacity(0.3),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: const Icon(
                Icons.download_rounded,
                color: Colors.white,
                size: 20,
              ),
            ),
            SizedBox(width: isSmallScreen ? 0 : 14, height: isSmallScreen ? 12 : 0),
            Flexible(
              child: Column(
                crossAxisAlignment: isSmallScreen ? CrossAxisAlignment.start : CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "Download Content",
                    style: GoogleFonts.inter(
                      fontSize: isSmallScreen ? 18 : 20,
                      fontWeight: FontWeight.w700,
                      color: isDark ? const Color(0xFFF8FAFC) : const Color(0xFF0F172A),
                      letterSpacing: -0.4,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    "High-quality downloads from YouTube",
                    style: GoogleFonts.inter(
                      fontSize: 13,
                      fontWeight: FontWeight.w500,
                      color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                      letterSpacing: 0.1,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildUrlInput() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "YouTube URL",
          style: GoogleFonts.inter(
            fontSize: 15,
            fontWeight: FontWeight.w600,
            color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
            letterSpacing: -0.1,
          ),
        ),
        const SizedBox(height: 8),
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(isDark ? 0.2 : 0.04),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: TextField(
            controller: _urlController,
            focusNode: _urlFocusNode,
            style: GoogleFonts.inter(
              fontSize: 15,
              fontWeight: FontWeight.w500,
              letterSpacing: 0.1,
            ),
            decoration: InputDecoration(
              hintText: "Paste your YouTube link here...",
              prefixIcon: Container(
                margin: const EdgeInsets.all(10),
                padding: const EdgeInsets.all(6),
                decoration: BoxDecoration(
                  color: const Color(0xFF6366F1).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Icon(
                  Icons.link_rounded,
                  color: Color(0xFF6366F1),
                  size: 18,
                ),
              ),
              suffixIcon: _urlController.text.isNotEmpty
                  ? IconButton(
                      icon: const Icon(Icons.clear_rounded, size: 20),
                      onPressed: () {
                        setState(() {
                          _urlController.clear();
                        });
                      },
                    )
                  : null,
            ),
            onChanged: (value) {
              setState(() {});
            },
          ),
        ),
      ],
    );
  }

  Widget _buildFormatAndModeRow() {
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 500;
    
    return Flex(
      direction: isSmallScreen ? Axis.vertical : Axis.horizontal,
      children: [
        Flexible(child: _buildFormatDropdown()),
        SizedBox(width: isSmallScreen ? 0 : 16, height: isSmallScreen ? 16 : 0),
        Flexible(child: _buildModeDropdown()),
      ],
    );
  }

 Widget _buildFormatDropdown() {
  final isDark = Theme.of(context).brightness == Brightness.dark;
  
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        "Quality",
        style: GoogleFonts.inter(
          fontSize: 15,
          fontWeight: FontWeight.w600,
          color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
          letterSpacing: -0.1,
        ),
      ),
      const SizedBox(height: 8),
      Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(isDark ? 0.2 : 0.04),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: DropdownButtonFormField<String>(
          value: _selectedFormat,
          decoration: const InputDecoration(
            border: InputBorder.none,
          ),
          isExpanded: true,
          dropdownColor: isDark ? const Color(0xFF1E293B) : Colors.white,
          onChanged: (value) => setState(() => _selectedFormat = value!),
          menuMaxHeight: 150, // Limit dropdown height
          items: [
            DropdownMenuItem(
              value: "mp4",
              child: Row(
                mainAxisSize: MainAxisSize.min,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: const Color(0xFF3B82F6).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Icon(
                        Icons.high_quality_rounded,
                        color: Color(0xFF3B82F6),
                        size: 16, 
                      ),
                    ),
                    const SizedBox(width: 8),
                    Flexible(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "Best Video",
                            style: GoogleFonts.inter(
                              fontWeight: FontWeight.w600,
                              fontSize: 12, 
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
            ),
            DropdownMenuItem(
              value: "mp3",
              child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(4), 
                      decoration: BoxDecoration(
                        color: const Color(0xFF8B5CF6).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Icon(
                        Icons.audiotrack_rounded,
                        color: Color(0xFF8B5CF6),
                        size: 16,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Flexible(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "Best Audio",
                            style: GoogleFonts.inter(
                              fontWeight: FontWeight.w600,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
            ),
          ],
        ),
      ),
    ],
  );
}

Widget _buildModeDropdown() {
  final isDark = Theme.of(context).brightness == Brightness.dark;
  
  return Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      Text(
        "Mode",
        style: GoogleFonts.inter(
          fontSize: 15,
          fontWeight: FontWeight.w600,
          color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
          letterSpacing: -0.1,
        ),
      ),
      const SizedBox(height: 8),
      Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(16),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(isDark ? 0.2 : 0.04),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: DropdownButtonFormField<String>(
          value: _selectedMode,
          decoration: const InputDecoration(
            border: InputBorder.none,
          ),
          isExpanded: true,
          dropdownColor: isDark ? const Color(0xFF1E293B) : Colors.white,
          onChanged: (value) => setState(() => _selectedMode = value!),
          menuMaxHeight: 150, 
          items: [
            DropdownMenuItem(
              value: "single",
              child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(4), 
                      decoration: BoxDecoration(
                        color: const Color(0xFF06B6D4).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Icon(
                        Icons.music_note_rounded,
                        color: Color(0xFF06B6D4),
                        size: 16,
                      ),
                    ),
                    const SizedBox(width: 8),
                    Flexible(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "Single",
                            style: GoogleFonts.inter(
                              fontWeight: FontWeight.w600,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
            ),
            DropdownMenuItem(
              value: "playlist",
              child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: const Color(0xFFF59E0B).withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Icon(
                        Icons.queue_music_rounded,
                        color: Color(0xFFF59E0B),
                        size: 16,
                      ),
                    ),
                    const SizedBox(width: 8), 
                    Flexible(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "Playlist",
                            style: GoogleFonts.inter(
                              fontWeight: FontWeight.w600,
                              fontSize: 12,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
            ),
          ],
        ),
      ),
    ],
  );
}


  Widget _buildQualityInfoCard() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    
    return Container(
      constraints: const BoxConstraints(minHeight: 60),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: isDark
              ? [
                  const Color(0xFF6366F1).withOpacity(0.1),
                  const Color(0xFF8B5CF6).withOpacity(0.05),
                ]
              : [
                  const Color(0xFF6366F1).withOpacity(0.05),
                  const Color(0xFF8B5CF6).withOpacity(0.08),
                ],
        ),
        borderRadius: BorderRadius.circular(14),
        border: Border.all(
          color: const Color(0xFF6366F1).withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(10),
            decoration: BoxDecoration(
              color: const Color(0xFF6366F1).withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: const Icon(
              Icons.auto_awesome_rounded,
              color: Color(0xFF6366F1),
              size: 20,
            ),
          ),
          const SizedBox(width: 14),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  "Smart Quality Selection",
                  style: GoogleFonts.inter(
                    fontSize: 15,
                    fontWeight: FontWeight.w600,
                    color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  _selectedFormat == "mp3"
                      ? "Automatically selects the highest quality audio format available"
                      : "Automatically selects the best video quality with perfect audio sync",
                  style: GoogleFonts.inter(
                    fontSize: 13,
                    color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                    height: 1.4,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFolderSelection() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final screenWidth = MediaQuery.of(context).size.width;
    final isSmallScreen = screenWidth < 400;
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          "Download Location",
          style: GoogleFonts.inter(
            fontSize: 15,
            fontWeight: FontWeight.w600,
            color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
            letterSpacing: -0.1,
          ),
        ),
        const SizedBox(height: 10),
        Consumer<DownloadManager>(
          builder: (context, downloadManager, child) {
            return Container(
              padding: const EdgeInsets.all(14),
              decoration: BoxDecoration(
                color: isDark ? const Color(0xFF334155).withOpacity(0.3) : const Color(0xFFF8FAFC),
                borderRadius: BorderRadius.circular(14),
                border: Border.all(
                  color: isDark 
                      ? const Color(0xFF475569).withOpacity(0.5)
                      : const Color(0xFFE2E8F0),
                  width: 1.5,
                ),
              ),
              child: Flex(
                direction: isSmallScreen ? Axis.vertical : Axis.horizontal,
                crossAxisAlignment: isSmallScreen ? CrossAxisAlignment.start : CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Flexible(
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: downloadManager.downloadPath != null
                                ? const Color(0xFF10B981).withOpacity(0.1)
                                : const Color(0xFF6B7280).withOpacity(0.1),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Icon(
                            downloadManager.downloadPath != null
                                ? Icons.folder_rounded
                                : Icons.folder_outlined,
                            color: downloadManager.downloadPath != null
                                ? const Color(0xFF10B981)
                                : const Color(0xFF6B7280),
                            size: 18,
                          ),
                        ),
                        const SizedBox(width: 12),
                        Flexible(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Text(
                                downloadManager.downloadPath != null ? "Selected Folder" : "No folder selected",
                                style: GoogleFonts.inter(
                                  fontSize: 13,
                                  fontWeight: FontWeight.w600,
                                  color: downloadManager.downloadPath != null
                                      ? const Color(0xFF10B981)
                                      : const Color(0xFF6B7280),
                                ),
                              ),
                              if (downloadManager.downloadPath != null) ...[
                                const SizedBox(height: 2),
                                Text(
                                  downloadManager.downloadPath!,
                                  overflow: TextOverflow.ellipsis,
                                  maxLines: 1,
                                  style: GoogleFonts.inter(
                                    fontSize: 12,
                                    color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                                  ),
                                ),
                              ] else ...[
                                const SizedBox(height: 2),
                                Text(
                                  "Choose where to save your downloads",
                                  style: GoogleFonts.inter(
                                    fontSize: 12,
                                    color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                                  ),
                                ),
                              ],
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(width: isSmallScreen ? 0 : 12, height: isSmallScreen ? 12 : 0),
                  Container(
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
                      ),
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: [
                        BoxShadow(
                          color: const Color(0xFF6366F1).withOpacity(0.3),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: IconButton(
                      iconSize: 18,
                      onPressed: () async {
                        await downloadManager.setDownloadPath();
                      },
                      icon: const Icon(Icons.folder_open_rounded, color: Colors.white),
                      tooltip: "Choose Download Folder",
                    ),
                  ),
                ],
              ),
            );
          },
        ),
      ],
    );
  }

  Widget _buildDownloadButton() {
    final screenHeight = MediaQuery.of(context).size.height;
    final isSmallScreen = screenHeight < 600;
    
    return MouseRegion(
      onEnter: (_) => setState(() => _isHovering = true),
      onExit: (_) => setState(() => _isHovering = false),
      child: AnimatedContainer(
        duration: const Duration(milliseconds: 200),
        transform: Matrix4.identity()..scale(_isHovering ? 1.02 : 1.0),
        child: Container(
          width: double.infinity,
          height: isSmallScreen ? 52 : 56,
          decoration: BoxDecoration(
            gradient: const LinearGradient(
              colors: [Color(0xFF6366F1), Color(0xFF8B5CF6)],
              begin: Alignment.centerLeft,
              end: Alignment.centerRight,
            ),
            borderRadius: BorderRadius.circular(14),
            boxShadow: [
              BoxShadow(
                color: const Color(0xFF6366F1).withOpacity(0.4),
                blurRadius: _isHovering ? 20 : 12,
                offset: Offset(0, _isHovering ? 8 : 4),
                spreadRadius: _isHovering ? 2 : 0,
              ),
            ],
          ),
          child: AnimatedBuilder(
            animation: _shimmerAnimation,
            builder: (context, child) {
              return Stack(
                children: [
                  // Shimmer effect
                  Positioned.fill(
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(14),
                        gradient: LinearGradient(
                          colors: [
                            Colors.white.withOpacity(0.0),
                            Colors.white.withOpacity(0.1),
                            Colors.white.withOpacity(0.0),
                          ],
                          stops: const [0.0, 0.5, 1.0],
                          begin: Alignment(-1.0 + 2.0 * _shimmerAnimation.value, 0.0),
                          end: Alignment(1.0 + 2.0 * _shimmerAnimation.value, 0.0),
                        ),
                      ),
                    ),
                  ),
                  // Button content
                  Material(
                    color: Colors.transparent,
                    child: InkWell(
                      onTap: _addToQueue,
                      borderRadius: BorderRadius.circular(14),
                      child: Container(
                        width: double.infinity,
                        height: double.infinity,
                        alignment: Alignment.center,
                        child: Wrap(
                          alignment: WrapAlignment.center,
                          crossAxisAlignment: WrapCrossAlignment.center,
                          children: [
                            Container(
                              padding: const EdgeInsets.all(6),
                              decoration: BoxDecoration(
                                color: Colors.white.withOpacity(0.15),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: const Icon(
                                Icons.download_rounded,
                                color: Colors.white,
                                size: 18,
                              ),
                            ),
                            const SizedBox(width: 10),
                            Text(
                              "Add to Download Queue",
                              style: GoogleFonts.inter(
                                color: Colors.white,
                                fontWeight: FontWeight.w600,
                                fontSize: 15,
                                letterSpacing: 0.2,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              );
            },
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return _buildGradientCard();
  }
}

----------------------------------------
File Location: lib\screens\components\ongoing_tasks.dart
File Name: ongoing_tasks.dart
File Code:
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:google_fonts/google_fonts.dart';
import '/models/download_manager.dart';

class OngoingTasks extends StatefulWidget {
  const OngoingTasks({super.key});

  @override
  State<OngoingTasks> createState() => _OngoingTasksState();
}

class _OngoingTasksState extends State<OngoingTasks>
    with TickerProviderStateMixin {
  late AnimationController _pulseController;
  late Animation<double> _pulseAnimation;

  @override
  void initState() {
    super.initState();
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1200),
      vsync: this,
    )..repeat(reverse: true);

    _pulseAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _pulseController,
      curve: Curves.easeInOut,
    ));
  }

  @override
  void dispose() {
    _pulseController.dispose();
    super.dispose();
  }

  bool _isSmallScreen() {
    return MediaQuery.of(context).size.width < 480;
  }

  double _getResponsivePadding() {
    final width = MediaQuery.of(context).size.width;
    if (width < 480) return width * 0.04;
    if (width < 768) return width * 0.06;
    return width * 0.08;
  }

  double _getResponsiveFontSize(double baseSize) {
    final shortestSide = MediaQuery.of(context).size.shortestSide;
    if (shortestSide < 360) return baseSize * 0.85;
    if (shortestSide < 480) return baseSize * 0.9;
    if (shortestSide < 600) return baseSize;
    return baseSize * 1.1;
  }

  double _getResponsiveIconSize(double baseSize) {
    return _getResponsiveFontSize(baseSize);
  }

  IconData _getFormatIcon(String format) {
    switch (format) {
      case 'mp3':
        return Icons.audiotrack_rounded;
      case 'mp4':
        return Icons.videocam_rounded;
      default:
        return Icons.insert_drive_file_rounded;
    }
  }

  Color _getFormatColor(String format, BuildContext context) {
    switch (format) {
      case 'mp3':
        return const Color(0xFF8B5CF6);
      case 'mp4':
        return const Color(0xFF3B82F6);
      default:
        return const Color(0xFF6B7280);
    }
  }

  Widget _buildEmptyState() {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final responsivePadding = _getResponsivePadding();
    final iconSize = _getResponsiveIconSize(48);
    final fontSizeTitle = _getResponsiveFontSize(20);
    final fontSizeSubtitle = _getResponsiveFontSize(16);

    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          AnimatedBuilder(
            animation: _pulseAnimation,
            builder: (context, child) {
              return Transform.scale(
                scale: _pulseAnimation.value,
                child: Container(
                  padding: EdgeInsets.all(responsivePadding * 1.5),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        const Color(0xFF6366F1).withOpacity(0.1),
                        const Color(0xFF8B5CF6).withOpacity(0.05),
                      ],
                    ),
                    shape: BoxShape.circle,
                    border: Border.all(
                      color: const Color(0xFF6366F1).withOpacity(0.2),
                      width: 2,
                    ),
                  ),
                  child: Icon(
                    Icons.download_rounded,
                    size: iconSize,
                    color: const Color(0xFF6366F1).withOpacity(0.7),
                  ),
                ),
              );
            },
          ),
          SizedBox(height: responsivePadding),
          Text(
            "No Active Downloads",
            style: GoogleFonts.inter(
              fontSize: fontSizeTitle,
              fontWeight: FontWeight.w600,
              color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
            ),
          ),
          SizedBox(height: responsivePadding / 2),
          Padding(
            padding: EdgeInsets.symmetric(horizontal: responsivePadding * 2),
            child: Text(
              "Your downloads will appear here once you add them to the queue",
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: fontSizeSubtitle,
                color: isDark ? const Color(0xFF94A3B8) : const Color(0xFF64748B),
                height: 1.5,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTaskCard(task, int index) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final formatColor = _getFormatColor(task.format, context);
    final responsivePadding = _getResponsivePadding();
    final isSmall = _isSmallScreen();

    return AnimatedContainer(
      duration: Duration(milliseconds: 300 + (index * 100)),
      curve: Curves.easeOutBack,
      margin: EdgeInsets.only(bottom: responsivePadding),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: isDark
                ? [
                    const Color(0xFF1E293B),
                    const Color(0xFF0F172A),
                  ]
                : [
                    Colors.white,
                    const Color(0xFFF8FAFC),
                  ],
          ),
          borderRadius: BorderRadius.circular(isSmall ? 16 : 20),
          border: Border.all(
            color: isDark
                ? const Color(0xFF334155).withOpacity(0.3)
                : const Color(0xFFE2E8F0).withOpacity(0.8),
            width: 1.5,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(isDark ? 0.3 : 0.08),
              blurRadius: 16,
              offset: const Offset(0, 4),
            ),
            BoxShadow(
              color: formatColor.withOpacity(0.1),
              blurRadius: 24,
              offset: const Offset(0, 8),
              spreadRadius: -4,
            ),
          ],
        ),
        child: Padding(
          padding: EdgeInsets.all(isSmall ? responsivePadding * 0.8 : responsivePadding),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildFormatIcon(task, formatColor),
                  SizedBox(width: responsivePadding * 0.75),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          task.fileName ?? task.url,
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                          style: GoogleFonts.inter(
                            fontSize: _getResponsiveFontSize(15),
                            fontWeight: FontWeight.w600,
                            color: isDark ? const Color(0xFFF8FAFC) : const Color(0xFF0F172A),
                            height: 1.3,
                          ),
                        ),
                        SizedBox(height: responsivePadding / 3),
                        _buildTaskMetadata(task, isDark),
                      ],
                    ),
                  ),
                  SizedBox(width: responsivePadding * 0.75),
                  _buildTaskStatus(task, isDark),
                ],
              ),
              SizedBox(height: responsivePadding),
              _buildProgressSection(task, formatColor, isDark),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildFormatIcon(task, Color formatColor) {
    final iconSize = _getResponsiveIconSize(24);
    final padding = _getResponsivePadding();

    return AnimatedBuilder(
      animation: _pulseAnimation,
      builder: (context, child) {
        return Transform.scale(
          scale: task.isDownloading ? _pulseAnimation.value : 1.0,
          child: Container(
            padding: EdgeInsets.all(_isSmallScreen() ? padding * 0.75 : padding),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [
                  formatColor.withOpacity(0.15),
                  formatColor.withOpacity(0.05),
                ],
              ),
              borderRadius: BorderRadius.circular(_isSmallScreen() ? 12 : 16),
              border: Border.all(
                color: formatColor.withOpacity(0.3),
                width: 1.5,
              ),
            ),
            child: Icon(
              _getFormatIcon(task.format),
              color: formatColor,
              size: iconSize,
            ),
          ),
        );
      },
    );
  }

  Widget _buildTaskMetadata(task, bool isDark) {
    final fontSize = _getResponsiveFontSize(11);
    final padding = _getResponsivePadding() / 2;

    return Wrap(
      spacing: padding,
      runSpacing: padding / 2,
      children: [
        Container(
          padding: EdgeInsets.symmetric(horizontal: padding * 1.5, vertical: padding / 1.5),
          decoration: BoxDecoration(
            color: task.format == "mp3"
                ? const Color(0xFF8B5CF6).withOpacity(0.1)
                : const Color(0xFF3B82F6).withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: task.format == "mp3"
                  ? const Color(0xFF8B5CF6).withOpacity(0.3)
                  : const Color(0xFF3B82F6).withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Text(
            task.format == "mp3" ? "Audio" : "Video",
            style: GoogleFonts.inter(
              fontSize: fontSize,
              fontWeight: FontWeight.w600,
              color: task.format == "mp3"
                  ? const Color(0xFF8B5CF6)
                  : const Color(0xFF3B82F6),
            ),
          ),
        ),
        Container(
          padding: EdgeInsets.symmetric(horizontal: padding * 1.5, vertical: padding / 1.5),
          decoration: BoxDecoration(
            color: task.mode == "playlist"
                ? const Color(0xFFF59E0B).withOpacity(0.1)
                : const Color(0xFF06B6D4).withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
            border: Border.all(
              color: task.mode == "playlist"
                  ? const Color(0xFFF59E0B).withOpacity(0.3)
                  : const Color(0xFF06B6D4).withOpacity(0.3),
              width: 1,
            ),
          ),
          child: Text(
            task.mode == "playlist" ? "Playlist" : "Single",
            style: GoogleFonts.inter(
              fontSize: fontSize,
              fontWeight: FontWeight.w600,
              color: task.mode == "playlist"
                  ? const Color(0xFFF59E0B)
                  : const Color(0xFF06B6D4),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTaskStatus(task, bool isDark) {
    final fontSize = _getResponsiveFontSize(12);
    final iconSize = _getResponsiveIconSize(16);
    final padding = _getResponsivePadding() * 0.75;

    if (task.isProcessing) {
      return Container(
        padding: EdgeInsets.all(padding * 0.75),
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFFF59E0B), Color(0xFFD97706)],
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFFF59E0B).withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox(
              width: iconSize,
              height: iconSize,
              child: const CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              ),
            ),
            SizedBox(width: padding / 2),
            Text(
              "Processing",
              style: GoogleFonts.inter(
                color: Colors.white,
                fontSize: fontSize,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      );
    }

    if (task.isDownloading) {
      return Container(
        padding: EdgeInsets.all(padding * 0.75),
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFF10B981), Color(0xFF059669)],
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: [
            BoxShadow(
              color: const Color(0xFF10B981).withOpacity(0.3),
              blurRadius: 8,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.download_rounded,
              color: Colors.white,
              size: iconSize,
            ),
            SizedBox(width: padding / 2),
            Text(
              "Downloading",
              style: GoogleFonts.inter(
                color: Colors.white,
                fontSize: fontSize,
                fontWeight: FontWeight.w600,
              ),
            ),
          ],
        ),
      );
    }

    return Container(
      padding: EdgeInsets.symmetric(horizontal: padding, vertical: padding / 2),
      decoration: BoxDecoration(
        color: isDark
            ? const Color(0xFF374151).withOpacity(0.5)
            : const Color(0xFFF3F4F6),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isDark
              ? const Color(0xFF4B5563).withOpacity(0.5)
              : const Color(0xFFE5E7EB),
          width: 1,
        ),
      ),
      child: Text(
        "In Queue",
        style: GoogleFonts.inter(
          fontSize: fontSize,
          fontWeight: FontWeight.w500,
          color: isDark ? const Color(0xFF9CA3AF) : const Color(0xFF6B7280),
        ),
      ),
    );
  }

  Widget _buildProgressSection(task, Color formatColor, bool isDark) {
    final fontSize = _getResponsiveFontSize(14);
    final padding = _getResponsivePadding();
    final progressHeight = _isSmallScreen() ? 6.0 : 8.0;

    if (!task.isDownloading && !task.isProcessing) {
      return Container(
        padding: EdgeInsets.all(padding * 0.75),
        decoration: BoxDecoration(
          color: isDark
              ? const Color(0xFF374151).withOpacity(0.3)
              : const Color(0xFFF9FAFB),
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isDark
                ? const Color(0xFF4B5563).withOpacity(0.3)
                : const Color(0xFFE5E7EB),
            width: 1,
          ),
        ),
        child: Row(
          children: [
            Icon(
              Icons.schedule_rounded,
              color: isDark ? const Color(0xFF9CA3AF) : const Color(0xFF6B7280),
              size: _getResponsiveIconSize(20),
            ),
            SizedBox(width: padding * 0.75),
            Expanded(
              child: Text(
                "Waiting in queue...",
                style: GoogleFonts.inter(
                  fontSize: fontSize,
                  fontWeight: FontWeight.w500,
                  color: isDark ? const Color(0xFF9CA3AF) : const Color(0xFF6B7280),
                ),
              ),
            ),
          ],
        ),
      );
    }

    return Column(
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              task.isProcessing ? "Processing..." : "Downloading...",
              style: GoogleFonts.inter(
                fontSize: fontSize,
                fontWeight: FontWeight.w600,
                color: isDark ? const Color(0xFFE2E8F0) : const Color(0xFF374151),
              ),
            ),
            Text(
              "${(task.progress * 100).toStringAsFixed(1)}%",
              style: GoogleFonts.inter(
                fontSize: fontSize,
                fontWeight: FontWeight.w700,
                color: formatColor,
              ),
            ),
          ],
        ),
        SizedBox(height: padding / 2),
        ClipRRect(
          borderRadius: BorderRadius.circular(progressHeight),
          child: Container(
            height: progressHeight,
            decoration: BoxDecoration(
              color: isDark
                  ? const Color(0xFF374151).withOpacity(0.5)
                  : const Color(0xFFF3F4F6),
              borderRadius: BorderRadius.circular(progressHeight),
            ),
            child: Stack(
              children: [
                FractionallySizedBox(
                  widthFactor: task.progress,
                  child: AnimatedContainer(
                    duration: const Duration(milliseconds: 300),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: [
                          formatColor,
                          formatColor.withOpacity(0.8),
                        ],
                      ),
                      borderRadius: BorderRadius.circular(progressHeight),
                      boxShadow: [
                        BoxShadow(
                          color: formatColor.withOpacity(0.4),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                  ),
                ),
                if (task.isDownloading && !task.isProcessing)
                  AnimatedBuilder(
                    animation: _pulseController,
                    builder: (context, child) {
                      return FractionallySizedBox(
                        widthFactor: task.progress,
                        child: Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [
                                Colors.white.withOpacity(0.0),
                                Colors.white.withOpacity(0.3 * _pulseAnimation.value),
                                Colors.white.withOpacity(0.0),
                              ],
                              stops: const [0.0, 0.5, 1.0],
                            ),
                            borderRadius: BorderRadius.circular(progressHeight),
                          ),
                        ),
                      );
                    },
                  ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Consumer<DownloadManager>(
      builder: (context, downloadManager, child) {
        if (downloadManager.downloadQueue.isEmpty) {
          return _buildEmptyState();
        }

        return ListView.builder(
          padding: EdgeInsets.only(bottom: _getResponsivePadding() * 2),
          itemCount: downloadManager.downloadQueue.length,
          itemBuilder: (context, index) {
            final task = downloadManager.downloadQueue[index];
            return _buildTaskCard(task, index);
          },
        );
      },
    );
  }
}

----------------------------------------
File Location: lib\services\downloader.dart
File Name: downloader.dart
File Code:
import 'dart:convert';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:path/path.dart' as p;

/// Download states for UI feedback
enum DownloadStage {
  preparing,
  downloading,
  processing,
  completed,
  error,
}

/// Starts a download using yt-dlp with optimized best format selection
Future<void> startDownload({
  required String url,
  required String format,
  required String downloadMode,
  required String downloadPath,
  required Function(double) onProgress,
  required Function(String) onError,
  required Function() onComplete,
  required bool createPlaylistFolder,
  Function()? onProcessing,
  Function(String)? onFileName,
}) async {
  String ytDlpPath = "dependencies/yt-dlp.exe";
  String ffmpegPath = "dependencies/ffmpeg/bin/ffmpeg.exe";

  Map<String, String> envVars = {"FFMPEG_BINARY": ffmpegPath};

  try {
    List<String> ytDlpArgs = [
      "--ffmpeg-location",
      ffmpegPath,
      "--add-metadata",
      "--embed-thumbnail",
    ];

    String outputPath = downloadPath;
    String fileNameTemplate = "%(title)s.%(ext)s";

    if (downloadMode == "playlist" && createPlaylistFolder) {
      String playlistFolderName = "%(playlist_title)s";
      outputPath = p.join(downloadPath, playlistFolderName);

      try {
        await Directory(outputPath).create(recursive: true);
        debugPrint("Playlist folder created: $outputPath");
      } catch (e) {
        onError("Error creating playlist folder: $e");
        return;
      }
    }

    ytDlpArgs.addAll(["-o", p.join(outputPath, fileNameTemplate)]);

    // Use yt-dlp's built-in best format selection (much faster)
    if (format == "mp3") {
      ytDlpArgs.addAll([
        "-f", "bestaudio/best",
        "--extract-audio",
        "--audio-format", "mp3",
        "--audio-quality", "0", // Best quality
        "--embed-thumbnail",
        "--add-metadata",
      ]);
    } else {
      // For video: improved format selection for best quality
      ytDlpArgs.addAll([
        "-f", "bestvideo+bestaudio/best",
        "--merge-output-format", "mp4",
        "--embed-thumbnail",
        "--add-metadata",
      ]);
    }


    ytDlpArgs.add(downloadMode == "single" ? "--no-playlist" : "--yes-playlist");
    ytDlpArgs.add(url);

    bool isProcessing = false;
    bool isDownloadFinished = false;

    debugPrint("Starting download with optimized format selection");
    Process ytDlpProcess = await Process.start(
      ytDlpPath,
      ytDlpArgs,
      environment: envVars,
    );

    ytDlpProcess.stdout.transform(utf8.decoder).listen((data) {
      debugPrint("yt-dlp output: $data");

      // Detect file name
      final fileMatch = RegExp(r'\[download\] Destination: (.+)').firstMatch(data);
      if (fileMatch != null && onFileName != null) {
        onFileName(fileMatch.group(1)!);
      }

      // Detect download progress
      if (data.contains("[download]")) {
        double progress = _parseProgress(data);
        onProgress(progress);
      }

      // Detect start of processing (FFmpeg, extraction, merging, etc.)
      if ((data.contains("[ffmpeg]") || 
           data.contains("[ExtractAudio]") || 
           data.contains("Merging formats into") ||
           data.contains("Deleting original file")) && !isProcessing) {
        isProcessing = true;
        if (onProcessing != null) onProcessing();
      }

      // Detect download finished
      if (data.contains("[download] 100%") || data.contains("[download] Finished downloading")) {
        isDownloadFinished = true;
        onProgress(1.0);
      }
    }, onError: (error) {
      debugPrint("yt-dlp error: $error");
      onError(error.toString());
    });

    ytDlpProcess.stderr.transform(utf8.decoder).listen((data) {
      debugPrint("yt-dlp stderr: $data");
      if (data.contains("ERROR") || data.contains("Error")) {
        onError(data);
      }
    });

    int exitCode = await ytDlpProcess.exitCode;
    if (exitCode == 0) {
      debugPrint("Download and processing complete");
      onProgress(1.0);
      onComplete();
    } else {
      debugPrint("Download failed with exit code $exitCode");
      onError("yt-dlp exited with code $exitCode");
    }
  } catch (e) {
    debugPrint("Error during download: $e");
    onError(e.toString());
  }
}

double _parseProgress(String output) {
  RegExp regex = RegExp(r'\[download\]\s+(\d+\.\d+)%');
  Match? match = regex.firstMatch(output);
  return match != null ? double.parse(match.group(1)!) / 100 : 0.0;
}

----------------------------------------
File Location: lib\utils\file_picker.dart
File Name: file_picker.dart
File Code:
// file_picker.dart
import 'package:file_picker/file_picker.dart';
import 'package:flutter/material.dart'; // Make sure you have this package

Future<String?> pickDownloadFolder() async {
  try {
    String? directory = await FilePicker.platform.getDirectoryPath();
    return directory;
    } catch (e) {
    // Handle exceptions (permissions, etc.)
    debugPrint("Error picking directory: $e");
    return null;
  }
}

----------------------------------------
